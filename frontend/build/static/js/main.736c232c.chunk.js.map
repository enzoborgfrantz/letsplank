{"version":3,"sources":["logo.svg","shared/hooks/useScript.tsx","shared/hooks/useGoogleApi.tsx","components/Timer/Timer.tsx","shared/hooks/useGoogleAuth.tsx","components/Profile/Profile.tsx","shared/hooks/useOnClickOutside.ts","App.js","serviceWorker.js","index.js"],"names":["module","exports","cachedScripts","timer","State","gapiAttributes","clientId","scope","googleApiContext","createContext","isGoogleApiReady","useGoogleApiProvider","useState","setIsGoogleApiReady","src","loaded","error","state","setState","useEffect","includes","push","script","document","createElement","async","onScriptLoad","onScriptError","index","indexOf","splice","remove","addEventListener","body","appendChild","removeEventListener","useScript","scriptLoaded","gapi","window","load","authPromise","auth2","init","then","console","log","clientPromise","client","drive","drivePromise","Promise","all","GoogleApiProvider","children","googleApi","Provider","value","useGoogleApi","useContext","googleAuthContext","isUserAuthenticated","GoogleAuthProvider","googleAuth","setIsUserAuthenticated","userProfile","setUserProfile","authenticateUser","getAuthInstance","isSignedIn","get","profile","currentUser","getBasicProfile","name","getName","firstName","getGivenName","lastName","getFamilyName","profilePhotoUrl","getImageUrl","email","getEmail","id","getId","signIn","a","signOut","undefined","useGoogleAuthProvider","useGoogleAuth","Timer","Initial","timeElapsed","setTimeElapsed","format","onClick","Running","startTime","Date","now","setInterval","Finished","clearInterval","fetch","headers","method","JSON","stringify","userId","durationMS","UserProfile","styled","div","ProfilePicture","img","UserName","span","Menu","ProfileMenu","showMenu","setShowMenu","ref","useRef","handler","listener","event","current","contains","target","useOnClickOutside","Profile","authenticate","App","className","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.736c232c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import { useState, useEffect } from \"react\";\n\n// Hook\nconst cachedScripts: String[] = [];\n\nexport function useScript(src: string) {\n  // Keeping track of script loaded and error state\n  const [state, setState] = useState({\n    loaded: false,\n    error: false,\n  });\n\n  useEffect(\n    () => {\n      // If cachedScripts array already includes src that means another instance ...\n      // ... of this hook already loaded this script, so no need to load again.\n      if (cachedScripts.includes(src)) {\n        setState({\n          loaded: true,\n          error: false,\n        });\n      } else {\n        cachedScripts.push(src);\n\n        // Create script\n        const script = document.createElement(\"script\");\n        script.src = src;\n        script.async = true;\n\n        // Script event listener callbacks for load and error\n        const onScriptLoad = () => {\n          setState({\n            loaded: true,\n            error: false,\n          });\n        };\n\n        const onScriptError = () => {\n          // Remove from cachedScripts we can try loading again\n          const index = cachedScripts.indexOf(src);\n          if (index >= 0) cachedScripts.splice(index, 1);\n          script.remove();\n\n          setState({\n            loaded: true,\n            error: true,\n          });\n        };\n\n        script.addEventListener(\"load\", onScriptLoad);\n        script.addEventListener(\"error\", onScriptError);\n\n        // Add script to document body\n        document.body.appendChild(script);\n\n        // Remove event listeners on cleanup\n        return () => {\n          script.removeEventListener(\"load\", onScriptLoad);\n          script.removeEventListener(\"error\", onScriptError);\n        };\n      }\n    },\n    [src] // Only re-run effect if script src changes\n  );\n\n  return [state.loaded, state.error];\n}\n","import React, { useState, useEffect, useContext, createContext } from \"react\";\n\nimport { useScript } from \"./useScript\";\n\nconst gapiAttributes = {\n  clientId:\n    \"585215768320-6mpak3k27vfsa2ljulfed020ujaidl2t.apps.googleusercontent.com\",\n  scope:\n    \"https://www.googleapis.com/auth/userinfo.email https://www.googleapis.com/auth/userinfo.profile openid\",\n  // discoveryDocs: [\"https://www.googleapis.com/discovery/v1/apis/drive/v3/rest\"],\n};\n\nconst googleApiContext = createContext<GoogleApi>({\n  isGoogleApiReady: false,\n});\n\nconst useGoogleApiProvider = () => {\n  const [isGoogleApiReady, setIsGoogleApiReady] = useState(false);\n  const [scriptLoaded] = useScript(\"https://apis.google.com/js/platform.js\");\n\n  useEffect(() => {\n    if (scriptLoaded) {\n      const { gapi } = window;\n\n      // @TODO move these to their corresponding providers\n      gapi.load(\"client:auth2\", () => {\n        // @ts-ignore\n        const authPromise = gapi.auth2.init(gapiAttributes).then(() => {\n          console.log(\"authentication loaded\");\n        });\n        const clientPromise = gapi.client.init(gapiAttributes).then(() => {\n          console.log(\"client loaded\", window.gapi.client.drive);\n        });\n        const drivePromise = gapi.client.load(\"drive\", \"v3\");\n\n        Promise.all([authPromise, clientPromise, drivePromise]).then(() =>\n          setIsGoogleApiReady(true)\n        );\n      });\n    }\n  }, [scriptLoaded]);\n\n  return {\n    isGoogleApiReady,\n  };\n};\n\nexport const GoogleApiProvider = ({\n  children,\n}: {\n  children: JSX.Element | JSX.Element[];\n}) => {\n  const googleApi = useGoogleApiProvider();\n  return (\n    <googleApiContext.Provider value={googleApi}>\n      {children}\n    </googleApiContext.Provider>\n  );\n};\n\ninterface GoogleApi {\n  isGoogleApiReady: boolean;\n}\n\nexport const useGoogleApi = () => {\n  return useContext<GoogleApi>(googleApiContext);\n};\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport format from \"date-fns/format\";\nimport { useGoogleAuth } from \"../../shared/hooks\";\n\nlet timer: number;\n\nenum State {\n  Initial = \"initial\",\n  Running = \"running\",\n  Finished = \"finished\",\n}\n\nexport const Timer = () => {\n  const { isUserAuthenticated, userProfile } = useGoogleAuth();\n  const [state, setState] = useState(State.Initial);\n  const [timeElapsed, setTimeElapsed] = useState(0);\n\n  const startTimer = () => {\n    setState(State.Running);\n    const startTime = Date.now();\n    timer = window.setInterval(() => {\n      setTimeElapsed(Date.now() - startTime);\n    }, 1);\n  };\n\n  const stopTimer = () => {\n    setState(State.Finished);\n    clearInterval(timer);\n  };\n\n  const submitResult = () => {\n    if (!userProfile) {\n      return;\n    }\n\n    fetch(\"/plank\", {\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      method: \"POST\",\n      body: JSON.stringify({ userId: userProfile.id, durationMS: timeElapsed }),\n    }).then(console.log);\n  };\n\n  return (\n    <div>\n      {state === State.Initial && (\n        <>\n          <p>{format(timeElapsed, \"mm:ss\")}</p>\n          <button onClick={startTimer}>start</button>\n        </>\n      )}\n      {state === State.Running && (\n        <>\n          <p>{format(timeElapsed, \"mm:ss\")}</p>\n          <button onClick={stopTimer}>stop</button>\n        </>\n      )}\n      {state === State.Finished && (\n        <>\n          <p>{format(timeElapsed, \"mm:ss\")}</p>\n          {isUserAuthenticated ? (\n            <button onClick={submitResult}>submit</button>\n          ) : (\n            <span>please authenticate to submit score</span>\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n","import React, { useState, useEffect, useContext, createContext } from \"react\";\n\nimport { useGoogleApi } from \"./useGoogleApi\";\n\ninterface UserProfile {\n  name: string;\n  firstName: string;\n  lastName: string;\n  profilePhotoUrl: string;\n  email: string;\n  id: string;\n}\n\ninterface GoogleAuth {\n  signIn?: () => Promise<UserProfile | undefined>;\n  signOut?: () => void;\n  userProfile?: UserProfile;\n  isUserAuthenticated: boolean;\n}\n\nconst googleAuthContext = createContext<GoogleAuth>({\n  isUserAuthenticated: false,\n});\n\nconst useGoogleAuthProvider = () => {\n  const googleApi = useGoogleApi();\n  const { isGoogleApiReady } = googleApi;\n  const [isUserAuthenticated, setIsUserAuthenticated] = useState(false);\n  const [userProfile, setUserProfile] = useState<UserProfile>();\n\n  const authenticateUser = () => {\n    const auth2 = gapi.auth2.getAuthInstance();\n    const isSignedIn = auth2.isSignedIn.get();\n    setIsUserAuthenticated(isSignedIn);\n\n    if (!isSignedIn) {\n      return;\n    }\n\n    const user = auth2.currentUser.get();\n    const profile = user.getBasicProfile();\n\n    const userProfile: UserProfile = {\n      name: profile.getName(),\n      firstName: profile.getGivenName(),\n      lastName: profile.getFamilyName(),\n      profilePhotoUrl: profile.getImageUrl(),\n      email: profile.getEmail(),\n      id: profile.getId(),\n    };\n    setUserProfile(userProfile);\n    return userProfile;\n  };\n\n  const signIn = async () =>\n    window.gapi.auth2.getAuthInstance().signIn().then(authenticateUser);\n\n  const signOut = () => {\n    window.gapi.auth2\n      .getAuthInstance()\n      .signOut()\n      .then(() => {\n        setUserProfile(undefined);\n        setIsUserAuthenticated(false);\n      });\n  };\n\n  useEffect(() => {\n    if (isGoogleApiReady && !isUserAuthenticated) {\n      authenticateUser();\n    }\n  }, [isGoogleApiReady, isUserAuthenticated]);\n\n  const googleAuth: GoogleAuth = {\n    ...googleApi,\n    isUserAuthenticated,\n    userProfile,\n    signIn,\n    signOut,\n  };\n\n  return googleAuth;\n};\n\nexport const GoogleAuthProvider = ({\n  children,\n}: {\n  children: JSX.Element | JSX.Element[];\n}) => {\n  const googleAuth = useGoogleAuthProvider();\n  return (\n    <googleAuthContext.Provider value={googleAuth}>\n      {children}\n    </googleAuthContext.Provider>\n  );\n};\n\nexport const useGoogleAuth = () => {\n  return useContext<GoogleAuth>(googleAuthContext);\n};\n","import React, { useEffect, useRef, useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport { useGoogleApi } from \"../../shared/hooks/useGoogleApi\";\nimport { useOnClickOutside } from \"../../shared/hooks/useOnClickOutside\";\nimport { useGoogleAuth } from \"../../shared/hooks\";\n\nconst UserProfile = styled.div`\n  background-color: white;\n  padding: 4px;\n  border-radius: 8px;\n  display: flex;\n  align-items: center;\n  position: relative;\n  cursor: pointer;\n`;\n\nconst ProfilePicture = styled.img`\n  border-radius: 8px;\n  width: 32px;\n  height: 32px;\n`;\n\nconst UserName = styled.span`\n  font-family: monospace;\n  margin-left: 8px;\n  margin-right: 4px;\n`;\n\ninterface ProfileMenuProps {\n  profilePhotoUrl: string;\n  firstName: string;\n  signOut: (() => void) | undefined;\n}\n\nconst Menu = styled.div`\n  position: absolute;\n  right: 0;\n  top: 100%;\n  margin-top: 4px;\n  background-color: white;\n  border-radius: 8px;\n  padding: 5px;\n  z-index: 1;\n  box-shadow: 0px 2px 5px 2px rgba(222, 218, 222, 1);\n`;\n\nconst ProfileMenu = ({\n  profilePhotoUrl,\n  firstName,\n  signOut,\n}: ProfileMenuProps) => {\n  const [showMenu, setShowMenu] = useState(false);\n  const ref = useRef() as React.MutableRefObject<HTMLElement>;\n  useOnClickOutside(ref, () => setShowMenu(false));\n\n  return (\n    <>\n      <UserProfile\n        // @ts-ignore\n        ref={ref}\n        onClick={() => setShowMenu(true)}\n      >\n        <ProfilePicture src={profilePhotoUrl} />\n        <UserName>{firstName}</UserName>\n        {showMenu && (\n          <Menu>\n            <button onClick={signOut}>Sign out</button>\n          </Menu>\n        )}\n      </UserProfile>\n    </>\n  );\n};\n\nexport const Profile = () => {\n  const { isGoogleApiReady } = useGoogleApi();\n  const { isUserAuthenticated, userProfile, signIn, signOut } = useGoogleAuth();\n\n  useEffect(() => {\n    if (!userProfile) {\n      return;\n    }\n\n    const { firstName: name, profilePhotoUrl, id } = userProfile;\n    fetch(\"/user\", {\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      method: \"POST\",\n      body: JSON.stringify({ name, profilePhotoUrl, id }),\n    }).then(console.log);\n  }, [userProfile]);\n\n  if (!isGoogleApiReady) {\n    // console.log({ isGoogleApiReady });\n    return null;\n  }\n\n  const authenticate = async () => {\n    if (!signIn) {\n      return;\n    }\n    await signIn();\n    console.log(\"signed in\");\n  };\n\n  return (\n    <>\n      {isUserAuthenticated ? (\n        !userProfile ? null : (\n          <ProfileMenu\n            profilePhotoUrl={userProfile.profilePhotoUrl}\n            firstName={userProfile.firstName}\n            signOut={signOut}\n          />\n        )\n      ) : (\n        <button onClick={authenticate}>Sign in</button>\n      )}\n    </>\n  );\n};\n","import { useEffect } from \"react\";\n\n// https://usehooks.com/useOnClickOutside/\n\n// @ts-ignore\nexport const useOnClickOutside = (ref, handler) => {\n  useEffect(\n    () => {\n      // @ts-ignore\n      const listener = (event) => {\n        // Do nothing if clicking ref's element or descendent elements\n        if (!ref.current || ref.current.contains(event.target)) {\n          return;\n        }\n\n        handler(event);\n      };\n\n      document.addEventListener(\"mousedown\", listener);\n      document.addEventListener(\"touchstart\", listener);\n\n      return () => {\n        document.removeEventListener(\"mousedown\", listener);\n        document.removeEventListener(\"touchstart\", listener);\n      };\n    },\n    // Add ref and handler to effect dependencies\n    // It's worth noting that because passed in handler is a new ...\n    // ... function on every render that will cause this effect ...\n    // ... callback/cleanup to run every render. It's not a big deal ...\n    // ... but to optimize you can wrap handler in useCallback before ...\n    // ... passing it into this hook.\n    [ref, handler]\n  );\n};\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport { Timer } from \"./components/Timer\";\nimport { Profile } from \"./components/Profile\";\nimport { GoogleApiProvider, GoogleAuthProvider } from \"./shared/hooks\";\n\nfunction App() {\n  return (\n    <GoogleApiProvider>\n      <GoogleAuthProvider>\n        <div className=\"App\">\n          <header className=\"App-header\">\n            <Profile />\n            <Timer />\n          </header>\n        </div>\n      </GoogleAuthProvider>\n    </GoogleApiProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}